swagger: "2.0"
info:
    description: "This is the api documentation for the Hypermedia project"
    version: "1.0.0"
    title: "Hypermedia project 2019"
    contact:
        email: "sergioplacanica95.rc@gmail.it"
    license:
        name: "Apache 2.0"
        url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "polimi-hyp-2019.herokuapp.com"
basePath: "/"

tags:
    - name: 'book'
      description: 'fetch data starting from /books'
    - name: 'author'
      description: 'fetch data starting from /authors'
    - name: 'event'
      description: 'fetch data starting from /events'
    - name: 'authentication'
      description: 'handle the register, login and logout operations'
    - name: 'cart'
      description: 'handle the operation in the shopping cart'



securityDefinitions:
    sessionCookie:
        type: apiKey
        name: "connect.sid"
        in: header


definitions:
    book:
        type: object
        properties:
            isbn:
                type: string
            title:
                type: string
            publishingDate:
                type: string
            publishingHouse:
                type: string
            genre:
                type: string
            image:
                type: string
            abstract:
                type: string
                format: text
            authorInterview:
                type: string
                format: text
            price:
                type: number
                format: double
            isBestSeller:
                type: boolean
            isClassic:
                type: boolean
            isRecommended:
                type: boolean
            isNewRelease:
                type: boolean

    author:
        type: object
        properties:
            id:
                type: integer
            name:
                type: string
            image:
                type: string
            link:
                type: string
            bio:
                type: string
                format: text

    event:
        type: object
        properties:
            id:
                type: integer
            title:
                type: string
            date:
                type: string
                format: date
            mapSrc:
                type: string
            address:
                type: string
            phoneNumber:
                type: string
            email:
                type: string
                format: email
            start:
                type: string
                format: time
            end:
                type: string
                format: time
            image:
                type: string
            description:
                type: string
                format: text


    theme:
        type: object
        properties:
            data:
                type: integer
                format: increment
            value:
                type: string

    review:
        type: object
        properties:
            isbn:
                type: string
            bookReview:
                type: string
                format: text



    error:
        type: object
        description: 'the object returned by the api when something wrong happens, useful for debugging malformed urls'
        properties:
            error:
                type: string
                description: 'contains the probable cause of why the request went wrong'
    status:
        type: object
        description: 'the object returned by the api when a state change in the db or user session shoul be notified'
        properties:
            status:
                type: string
                description: 'explain the result of the rest call'


paths:
    /books:
        get:
            tags:
                - 'book'
            description: 'fetch books based on query parameters, if no query parameters are present, fetch all books'
            produces:
                - 'application/json'
            security:
                - sessionCookie: []
            parameters:
                - in: query
                  name: bestSeller
                  type: boolean
                  required: false
                - in: query
                  name: newRelease
                  type: boolean
                  required: false
                - in: query
                  name: recommended
                  type: boolean
                  required: false
                - in: query
                  name: author
                  type: string
                  required: false
                - in: query
                  name: title
                  type: string
                  required: false
                - in: query
                  name: theme
                  type: string
                  required: false
                - in: query
                  name: genre
                  type: string
                  required: false

            responses:
                200:
                    description: 'Books response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/book'
                244:
                    description: 'the server understand the request but parameters values are wrong'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'



    /books/{isbn}:
        get:
            tags:
                - 'book'
            description: 'Return a books based on its isbn'
            produces:
                - 'application/json'
            parameters:
                - name: 'isbn'
                  in: 'path'
                  description: 'isbn of book to fetch'
                  required: true
                  type: string
            responses:
                200:
                    description: 'Book response'
                    schema:
                        $ref: '#/definitions/book'

                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'



    /books/{isbn}/authors:
        get:
            tags:
                - 'book'
            description: 'Return all the authors of a book based on its isbn'
            produces:
                - 'application/json'
            parameters:
                - name: 'isbn'
                  in: 'path'
                  description: 'isbn of the book'
                  required: true
                  type: string
            responses:
                200:
                    description: 'Authors response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/author'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'


    /books/{isbn}/themes:
        get:
            tags:
                - 'book'
            description: 'Returns all the themes of a book based on its isbn'
            produces:
                - 'application/json'
            parameters:
                - name: 'isbn'
                  in: 'path'
                  description: 'isbn of the book'
                  required: true
                  type: string
            responses:
                200:
                    description: 'Themes response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/theme'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'

    /books/{isbn}/reviews:
        get:
            tags:
                - 'book'
            description: 'Returns all the reviews of a book based on its isbn'
            produces:
                - 'application/json'
            parameters:
                - name: 'isbn'
                  in: 'path'
                  description: 'isbn of the book'
                  required: true
                  type: string
            responses:
                200:
                    description: 'Reviews response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/review'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'

    /books/{isbn}/similar:
        get:
            tags:
                - 'book'
            description: 'Returns all the books similar to this book'
            produces:
                - 'application/json'
            parameters:
                - name: 'isbn'
                  in: 'path'
                  description: 'isbn of the book'
                  required: true
                  type: string
            responses:
                200:
                    description: 'books response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/book'
                default:
                    description: 'unexpected error'

    /authors:
        get:
            tags:
                - 'author'
            description: 'Returns all the authors matching with name query parameter or all the authors if no query parameter is present'
            produces:
                - 'application/json'
            parameters:
                - in: query
                  name: name
                  description: 'matching string of the author'
                  required: false
                  type: string
            responses:
                200:
                    description: 'Authors response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/author'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'

    /authors/{id}:
        get:
            tags:
                - 'author'
            description: 'Returns one author based on his id'
            produces:
                - 'application/json'
            parameters:
                - in: 'path'
                  name: 'id'
                  description: 'id of the author'
                  required: true
                  type: integer
            responses:
                200:
                    description: 'Author response'
                    schema:
                        $ref: '#/definitions/author'
                default:
                    description: 'unexpected error'

    /authors/{id}/books:
        get:
            tags:
                - 'author'
            description: 'fetch all the books written by this author'
            produces:
                - 'application/json'
            parameters:
                - in: 'path'
                  name: 'id'
                  description: 'id of the author'
                  required: true
                  type: integer
            responses:
                200:
                    description: 'Books response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/book'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'

    /authors/{id}/similar:
        get:
            tags:
                - 'author'
            description: 'fetch all authors similar the one specified by id'
            produces:
                - 'application/json'
            parameters:
                -   in: 'path'
                    name: 'id'
                    description: 'id of the author'
                    required: true
                    type: integer
            responses:
                200:
                    description: 'Authors response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/author'
                default:
                    description: 'unexpected error'

    /events:
        get:
            tags:
                - 'event'
            description: 'get all the events in the range (fromDate, toDate), get all the events if no query parameters are present'
            produces:
                - 'application/json'
            parameters:
                - in: query
                  name: 'fromDate'
                  description: 'lower bound on the date'
                  type: string
                  format: date
                  required: false
                - in: query
                  name: 'toDate'
                  description: 'upper bound on date'
                  type: string
                  format: date
                  required: false
            responses:
                200:
                    description: 'Events response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/event'
                default:
                    description: 'unexpected error'

    /events/{id}:
        get:
            tags:
                - 'event'
            description: 'get a specific event by its id'
            produces:
                - 'application/json'
            parameters:
                - in: 'path'
                  name: 'id'
                  description: 'id of the event to fetch'
                  required: true
                  type: integer
            responses:
                200:
                    description: 'Event response'
                    schema:
                        $ref: '#/definitions/event'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'

    /events/{id}/books:
        get:
            tags:
                - 'event'
            description: 'get all books of a specific event'
            produces:
                - 'application/jsons'
            parameters:
                - in: 'path'
                  name: 'id'
                  description: 'id of the event'
                  required: true
                  type: integer
            responses:
                200:
                    description: 'Books response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/book'
                default:
                    description: 'unexpected error'

    /events/{id}/authors:
        get:
            tags:
                - 'event'
            description: 'fetch all authors presents at a specific event'
            produces:
                - 'application/json'
            parameters:
                -   in: 'path'
                    name: 'id'
                    description: 'id of the event'
                    required: true
                    type: integer
            responses:
                200:
                    description: 'Authors response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/author'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'

    /register:
        post:
            tags:
                - 'authentication'
            summary: Register a user to the website
            description: 'register a user to the website.'
            consumes:
                - 'application/x-www-form-urlencoded'
            produces:
                - 'application/json'
            parameters:
                - in: 'formData'
                  name: 'username'
                  description: 'the unique username that the user must choose, lenght shoult be at least 6 characters'
                  required: true
                  type: string
                - in: 'formData'
                  name: 'password'
                  description: "password of the user, at least 6 characters"
                  required: true
                  type: string
                - in: 'formData'
                  name: 'name'
                  required: true
                  description: 'first name of user'
                  type: string
                - in: 'formData'
                  name: 'surname'
                  description: 'last name of the user'
                  type: string
                  required: true
                - in: 'formData'
                  name: 'email'
                  description: 'email of the user'
                  type: string
                  format: email
                  required: true

            responses:
                200:
                    description: 'correctly registered'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                401:
                    description: 'already logged in'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'


    /login:
        post:
            tags:
                - 'authentication'
            summary: log in a registered user to the website
            description: 'log in a user to the website, a cookie that ensure a persistent connection is returned.'
            consumes:
                - 'application/x-www-form-urlencoded'
            produces:
                - 'application/json'
            parameters:
                - in: 'formData'
                  name: 'username'
                  description: 'the unique username that the user must choose, lenght shoult be at least 6 characters'
                  required: true
                  type: string
                - in: 'formData'
                  name: 'password'
                  description: "password of the user, at least 6 characters"
                  required: true
                  type: string

            responses:
                200:
                    description: 'correctly registered'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                401:
                    description: 'already logged in'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'

    /logout:
        post:
            security:
                - sessionCookie: []
            tags:
                - 'authentication'
            summary: logout a logged in user
            description: 'logout a user discarding its session cookie'
            consumes:
                - 'application/x-www-form-urlencoded'
            produces:
                - 'application/json'


            responses:
                200:
                    description: 'correctly registered'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                401:
                    description: 'already logged in'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'

    /cart/books:
        get:
            tags:
                - 'cart'
            summary: get all books in the cart of the loggedin user
            description: 'return all the books in the shopping cart of the user a user.'
            consumes:
                - 'application/x-www-form-urlencoded'
            produces:
                - 'application/json'

            responses:
                200:
                    description: 'Books response'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/book'
                401:
                    description: 'forbidden'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'

    /cart/add/{isbn}:
        post:
            tags:
                - 'cart'
            security:
                - sessionCookie: []
            summary: add a book to the cart
            description: 'add a book to the cart of the current user, if the book is already in the cart, increment the its quantity by one'
            consumes:
                - 'application/x-www-form-urlencoded'
            produces:
                - 'application/json'
            parameters:
                - in: 'path'
                  name: 'isbn'
                  description: 'book to be added isbn'
                  required: true
                  type: string


            responses:
                200:
                    description: 'correctly added the book'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                401:
                    description: 'forbidden'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'

    /cart/delete/{isbn}:
        post:
            tags:
                - 'cart'
            security:
                - sessionCookie: []
            summary: delete a book from the cart
            description: 'delete a book to the cart of the current user, if quantity of the book in the cart is >1, then it is decremented by one'
            consumes:
                - 'application/x-www-form-urlencoded'
            produces:
                - 'application/json'
            parameters:
                - in: 'path'
                  name: 'isbn'
                  description: 'book to be deleted isbn'
                  required: true
                  type: string


            responses:
                200:
                    description: 'correctly removed/decremented the book'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                401:
                    description: 'forbidden'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'

    /cart/delete/{isbn}/all:
        post:
            security:
                - sessionCookie: []
            tags:
                - 'cart'
            summary: delete all the book of one type from the cart
            description: 'delete a book to the cart of the current user, if quantity of the book in the cart is >1, then it is decremented by one'
            consumes:
                - 'application/x-www-form-urlencoded'
            produces:
                - 'application/json'
            parameters:
                - in: 'path'
                  name: 'isbn'
                  description: 'book to be deleted isbn'
                  required: true
                  type: string


            responses:
                200:
                    description: 'correctly removed the book'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/status'
                422:
                    description: 'bad formatted query parameters in url'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'
                500:
                    description: 'internal server error'
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/error'









